dE_u = (1-q)*p*Lambda*S_u -
(sigma_u+alpha_u)*E_u
dE_q = q*p*Lambda*S_u+alpha_u*E_u+ theta_j*Lambda*S_q -
sigma_q*E_q
dI_u = f1*sigma_u*E_u -
(gamma_u+phi_u+delta_u)*I_u
dI_h = f2*sigma_u*E_u+r*sigma_q*E_q+phi_u*I_u+sigma_a*I_a -
(gamma_h+nu_h+delta_h)*I_h
dI_a = (1-f1-f2)*sigma_u*E_u + (1-r)*sigma_q*E_q -
(gamma_a+sigma_a+delta_a)*I_a
dI_icu = nu_h*I_h -
(gamma_icu + delta_icu)*I_icu
dR = gamma_u*I_u+ gamma_h*I_h + gamma_a*I_a + gamma_icu*I_icu
dD = delta_u*I_u + delta_h*I_h + delta_a*I_a + delta_icu*I_icu
#combine results
results=c(dS_u,dS_q,dE_u, dE_q,dI_u,dI_h,dI_a,dI_icu,dR,dD,Lambda)
list(results)
}
)
}
Model_fun<-function(current_timepoint, state_values, parameters)
{
#creat state variables (local variables)
S_u<-state_values[1] # susceptible
S_q<-state_values[2] #early latenyy
E_u<-state_values[3] #late latency
E_q<-state_values[4] #infectious
I_u<-state_values[5]
I_h<-state_values[6]
I_icu<-state_values[7]
I_a<-state_values[8]
R<-state_values[9]
D<-state_values[10]
Lambda<-state_values[11]
with(
as.list(parameters), #variable names within parameters can be used
{
#compute derivative
Lambda = beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu))
dS_u = psi_q*S_q -
((1-p)+(1-q)*p+q*p)*Lambda*S_u
dS_q = (1-p)*Lambda*S_u -
(theta_j*Lambda+psi_q)*S_q
dE_u = (1-q)*p*Lambda*S_u -
(sigma_u+alpha_u)*E_u
dE_q = q*p*Lambda*S_u+alpha_u*E_u+ theta_j*Lambda*S_q -
sigma_q*E_q
dI_u = f1*sigma_u*E_u -
(gamma_u+phi_u+delta_u)*I_u
dI_h = f2*sigma_u*E_u+r*sigma_q*E_q+phi_u*I_u+sigma_a*I_a -
(gamma_h+nu_h+delta_h)*I_h
dI_a = (1-f1-f2)*sigma_u*E_u + (1-r)*sigma_q*E_q -
(gamma_a+sigma_a+delta_a)*I_a
dI_icu = nu_h*I_h -
(gamma_icu + delta_icu)*I_icu
dR = gamma_u*I_u+ gamma_h*I_h + gamma_a*I_a + gamma_icu*I_icu
dD = delta_u*I_u + delta_h*I_h + delta_a*I_a + delta_icu*I_icu
#combine results
results=c(dS_u,dS_q,dE_u, dE_q,dI_u,dI_h,dI_a,dI_icu,dR,dD,Lambda)
list(results)
}
)
}
beta= 0.8648
p=0.8073
q= 0.2
f1=0.4
f2=0.2
psi_q = 1/14
E_M = 0.5
C_M = 0.0546
eta_a = 0.5
eta_h = 0.5
theta_q = 1
theta_j = 0.5
sigma_u = 1/5.1
sigma_q = 1/5.1
sigma_a = 0.2435
alpha_u = 0.1160
phi_u = 1/5
r = 0.7
delta_u = 0.015
delta_h = 0.015
delta_a = 0.0075
delta_icu = 0.0225
gamma_u = 1/10
gamma_h = 1/8
gamma_a = 1/10
gamma_icu = 1/10
nu_h = 0.083
parameter_list<- c(beta=beta,p=p,q=q, psi_q=psi_q,E_M=E_M,C_M=C_M,
eta_h=eta_h,eta_a=eta_a,theta_j=theta_j,
sigma_u=sigma_u,sigma_a=sigma_a,sigma_q=sigma_q,
alpha_u=alpha_u, phi_u=phi_u, r=r,
delta_u=delta_u,delta_h=delta_h,delta_a=delta_a,delta_icu=delta_icu,
gamma_u=gamma_u,gamma_h=gamma_h,gamma_a=gamma_a,gamma_icu=gamma_icu,
nu_h=nu_h)
N=100
S_q0=0
E_u0= 0
E_q0=0
I_u0=0.001
I_a0=0
I_h0=0
I_icu0=0
R0=0
D0=0
S_u0=N-(S_q0+E_u0+E_q0+I_u0+I_a0+I_h0+I_icu0+R0+D0)
initial_populations <- c(S_u=S_u0,S_q=S_q0,E_u=E_u0,E_q=E_q0,
I_u=I_u0,I_a=I_a0,I_h=I_h0,I_icu=I_icu0,
R0=R0,D0=D0)
time=seq(0, 365, by = 1)
output_baseline=as.data.frame(lsoda(initial_populations, time, Model_fun, parameter_list))
View(output_baseline)
Model_fun<-function(current_timepoint, state_values, parameters)
{
#creat state variables (local variables)
S_u<-state_values[1] # susceptible
S_q<-state_values[2] #early latenyy
E_u<-state_values[3] #late latency
E_q<-state_values[4] #infectious
I_u<-state_values[5]
I_h<-state_values[6]
I_icu<-state_values[7]
I_a<-state_values[8]
R<-state_values[9]
D<-state_values[10]
with(
as.list(parameters), #variable names within parameters can be used
{
#compute derivative
#lambda=(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))
dS_u = psi_q*S_q -
((1-p)+(1-q)*p+q*p)*
(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))
*S_u
dS_q = (1-p)*
(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))
*S_u -
(theta_j*(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))+psi_q)
*S_q
dE_u = (1-q)*p*
(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))
*S_u -
(sigma_u+alpha_u)*E_u
dE_q = q*p*(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))
*S_u+alpha_u*E_u+ theta_j*(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))
*S_q -
sigma_q*E_q
dI_u = f1*sigma_u*E_u -
(gamma_u+phi_u+delta_u)*I_u
dI_h = f2*sigma_u*E_u+r*sigma_q*E_q+phi_u*I_u+sigma_a*I_a -
(gamma_h+nu_h+delta_h)*I_h
dI_a = (1-f1-f2)*sigma_u*E_u + (1-r)*sigma_q*E_q -
(gamma_a+sigma_a+delta_a)*I_a
dI_icu = nu_h*I_h -
(gamma_icu + delta_icu)*I_icu
dR = gamma_u*I_u+ gamma_h*I_h + gamma_a*I_a + gamma_icu*I_icu
dD = delta_u*I_u + delta_h*I_h + delta_a*I_a + delta_icu*I_icu
#combine results
results=c(dS_u,dS_q,dE_u, dE_q,dI_u,dI_h,dI_a,dI_icu,dR,dD,Lambda)
list(results)
}
)
}
beta= 0.8648
p=0.8073
Model_fun<-function(current_timepoint, state_values, parameters)
{
#creat state variables (local variables)
S_u<-state_values[1] # susceptible
S_q<-state_values[2] #early latenyy
E_u<-state_values[3] #late latency
E_q<-state_values[4] #infectious
I_u<-state_values[5]
I_h<-state_values[6]
I_icu<-state_values[7]
I_a<-state_values[8]
R<-state_values[9]
D<-state_values[10]
with(
as.list(parameters), #variable names within parameters can be used
{
#compute derivative
#lambda=(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))
dS_u = psi_q*S_q -
((1-p)+(1-q)*p+q*p)*
(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))
*S_u
dS_q = (1-p)*
(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))
*S_u -
(theta_j*(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))+psi_q)
*S_q
dE_u = (1-q)*p*
(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))
*S_u -
(sigma_u+alpha_u)*E_u
dE_q = q*p*(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))
*S_u+alpha_u*E_u+ theta_j*(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))
*S_q -
sigma_q*E_q
dI_u = f1*sigma_u*E_u -
(gamma_u+phi_u+delta_u)*I_u
dI_h = f2*sigma_u*E_u+r*sigma_q*E_q+phi_u*I_u+sigma_a*I_a -
(gamma_h+nu_h+delta_h)*I_h
dI_a = (1-f1-f2)*sigma_u*E_u + (1-r)*sigma_q*E_q -
(gamma_a+sigma_a+delta_a)*I_a
dI_icu = nu_h*I_h -
(gamma_icu + delta_icu)*I_icu
dR = gamma_u*I_u+ gamma_h*I_h + gamma_a*I_a + gamma_icu*I_icu
dD = delta_u*I_u + delta_h*I_h + delta_a*I_a + delta_icu*I_icu
#combine results
results=c(dS_u,dS_q,dE_u, dE_q,dI_u,dI_h,dI_a,dI_icu,dR,dD)
list(results)
}
)
}
dS_u = psi_q*S_q -
((1-p)+(1-q)*p+q*p)*
(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))
*S_u
Model_fun<-function(current_timepoint, state_values, parameters)
{
#creat state variables (local variables)
S_u<-state_values[1] # susceptible
S_q<-state_values[2] #early latenyy
E_u<-state_values[3] #late latency
E_q<-state_values[4] #infectious
I_u<-state_values[5]
I_h<-state_values[6]
I_icu<-state_values[7]
I_a<-state_values[8]
R<-state_values[9]
D<-state_values[10]
with(
as.list(parameters), #variable names within parameters can be used
{
#compute derivative
#lambda=(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))
dS_u = psi_q*S_q -
((1-p)+(1-q)*p+q*p)*(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))*S_u
dS_q = (1-p)*(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))*S_u -
(theta_j*(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))+psi_q)*S_q
dE_u = (1-q)*p*(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))*S_u -
(sigma_u+alpha_u)*E_u
dE_q = q*p*(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))*S_u+alpha_u*E_u+ theta_j*(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))*S_q -
sigma_q*E_q
dI_u = f1*sigma_u*E_u -
(gamma_u+phi_u+delta_u)*I_u
dI_h = f2*sigma_u*E_u+r*sigma_q*E_q+phi_u*I_u+sigma_a*I_a -
(gamma_h+nu_h+delta_h)*I_h
dI_a = (1-f1-f2)*sigma_u*E_u + (1-r)*sigma_q*E_q -
(gamma_a+sigma_a+delta_a)*I_a
dI_icu = nu_h*I_h -
(gamma_icu + delta_icu)*I_icu
dR = gamma_u*I_u+ gamma_h*I_h + gamma_a*I_a + gamma_icu*I_icu
dD = delta_u*I_u + delta_h*I_h + delta_a*I_a + delta_icu*I_icu
#combine results
results=c(dS_u,dS_q,dE_u, dE_q,dI_u,dI_h,dI_a,dI_icu,dR,dD)
list(results)
}
)
}
beta= 0.8648
p=0.8073
q= 0.2
f1=0.4
f2=0.2
psi_q = 1/14
E_M = 0.5
C_M = 0.0546
eta_a = 0.5
eta_h = 0.5
theta_q = 1
theta_j = 0.5
sigma_u = 1/5.1
sigma_q = 1/5.1
sigma_a = 0.2435
alpha_u = 0.1160
phi_u = 1/5
r = 0.7
delta_u = 0.015
delta_h = 0.015
delta_a = 0.0075
delta_icu = 0.0225
gamma_u = 1/10
gamma_h = 1/8
gamma_a = 1/10
gamma_icu = 1/10
nu_h = 0.083
parameter_list<- c(beta=beta,p=p,q=q, psi_q=psi_q,E_M=E_M,C_M=C_M,
eta_h=eta_h,eta_a=eta_a,theta_j=theta_j,
sigma_u=sigma_u,sigma_a=sigma_a,sigma_q=sigma_q,
alpha_u=alpha_u, phi_u=phi_u, r=r,
delta_u=delta_u,delta_h=delta_h,delta_a=delta_a,delta_icu=delta_icu,
gamma_u=gamma_u,gamma_h=gamma_h,gamma_a=gamma_a,gamma_icu=gamma_icu,
nu_h=nu_h)
S_q0=0
E_u0= 0
E_q0=0
I_u0=0.001
I_a0=0
I_h0=0
I_icu0=0
R0=0
D0=0
S_u0=N-(S_q0+E_u0+E_q0+I_u0+I_a0+I_h0+I_icu0+R0+D0)
initial_populations <- c(S_u=S_u0,S_q=S_q0,E_u=E_u0,E_q=E_q0,
I_u=I_u0,I_a=I_a0,I_h=I_h0,I_icu=I_icu0,
R0=R0,D0=D0)
time=seq(0, 365, by = 1)
output_baseline=as.data.frame(lsoda(initial_populations, time, Model_fun, parameter_list))
View(output_baseline)
#intervention simulation
#load packages
library(deSolve)
#define function
Model_fun<-function(current_timepoint, state_values, parameters)
{
#creat state variables (local variables)
S_u<-state_values[1] # susceptible
S_q<-state_values[2] #early latenyy
E_u<-state_values[3] #late latency
E_q<-state_values[4] #infectious
I_u<-state_values[5]
I_h<-state_values[6]
I_icu<-state_values[7]
I_a<-state_values[8]
R<-state_values[9]
D<-state_values[10]
with(
as.list(parameters), #variable names within parameters can be used
{
#compute derivative
#lambda=(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))
dS_u = psi_q*S_q-((1-p)+(1-q)*p+q*p)*(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))*S_u
dS_q = (1-p)*(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))*S_u - (theta_j*(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))+psi_q)*S_q
dE_u = (1-q)*p*(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))*S_u - (sigma_u+alpha_u)*E_u
dE_q = q*p*(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))*S_u+alpha_u*E_u+ theta_j*(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))*S_q - sigma_q*E_q
dI_u = f1*sigma_u*E_u - (gamma_u+phi_u+delta_u)*I_u
dI_h = f2*sigma_u*E_u+r*sigma_q*E_q+phi_u*I_u+sigma_a*I_a -(gamma_h+nu_h+delta_h)*I_h
dI_a = (1-f1-f2)*sigma_u*E_u + (1-r)*sigma_q*E_q - (gamma_a+sigma_a+delta_a)*I_a
dI_icu = nu_h*I_h - (gamma_icu + delta_icu)*I_icu
dR = gamma_u*I_u+ gamma_h*I_h + gamma_a*I_a + gamma_icu*I_icu
dD = delta_u*I_u + delta_h*I_h + delta_a*I_a + delta_icu*I_icu
#combine results
results=c(dS_u,dS_q,dE_u, dE_q,dI_u,dI_h,dI_a,dI_icu,dR,dD)
list(results)
}
)
}
#Parameters
#lambda=(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))
N=100beta= 0.8648
p=0.8073
q= 0.2
f1=0.4
f2=0.2
psi_q = 1/14
E_M = 0.5
C_M = 0.0546
eta_a = 0.5
eta_h = 0.5
theta_q = 1
theta_j = 0.5
sigma_u = 1/5.1
sigma_q = 1/5.1
sigma_a = 0.2435
alpha_u = 0.1160
phi_u = 1/5
r = 0.7
delta_u = 0.015
delta_h = 0.015
delta_a = 0.0075
delta_icu = 0.0225
gamma_u = 1/10
gamma_h = 1/8
gamma_a = 1/10
gamma_icu = 1/10
nu_h = 0.083
parameter_list<- c(beta=beta,p=p,q=q, psi_q=psi_q,E_M=E_M,C_M=C_M,
eta_h=eta_h,eta_a=eta_a,theta_j=theta_j,
sigma_u=sigma_u,sigma_a=sigma_a,sigma_q=sigma_q,
alpha_u=alpha_u, phi_u=phi_u, r=r,
delta_u=delta_u,delta_h=delta_h,delta_a=delta_a,delta_icu=delta_icu,
gamma_u=gamma_u,gamma_h=gamma_h,gamma_a=gamma_a,gamma_icu=gamma_icu,
nu_h=nu_h)
S_q0=0
E_u0= 0
E_q0=0
I_u0=0.001
I_a0=0
I_h0=0
I_icu0=0
R0=0
D0=0
S_u0=N-(S_q0+E_u0+E_q0+I_u0+I_a0+I_h0+I_icu0+R0+D0)
initial_populations <- c(S_u=S_u0,S_q=S_q0,E_u=E_u0,E_q=E_q0,
I_u=I_u0,I_a=I_a0,I_h=I_h0,I_icu=I_icu0,
R0=R0,D0=D0)
time=seq(0, 365, by = 1)
output_baseline=as.data.frame(lsoda(initial_populations, time, Model_fun, parameter_list))
View(output_baseline)
Model_fun<-function(current_timepoint, state_values, parameters)
{
#creat state variables (local variables)
S_u<-state_values[1] # susceptible
S_q<-state_values[2] #early latenyy
E_u<-state_values[3] #late latency
E_q<-state_values[4] #infectious
I_u<-state_values[5]
I_h<-state_values[6]
I_icu<-state_values[7]
I_a<-state_values[8]
R<-state_values[9]
D<-state_values[10]
with(
as.list(parameters), #variable names within parameters can be used
{
#compute derivative
#lambda=(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))
dS_u = -((1-p)+(1-q)*p+q*p)*(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))*S_u +psi_q*S_q
dS_q = (1-p)*(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))*S_u - (theta_j*(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))+psi_q)*S_q
dE_u = (1-q)*p*(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))*S_u - (sigma_u+alpha_u)*E_u
dE_q = q*p*(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))*S_u+alpha_u*E_u+ theta_j*(beta*(1-E_M*C_M)*(I_u+eta_a*I_a+eta_h*I_h)/(N-theta_q*(E_q+I_h+I_icu)))*S_q - sigma_q*E_q
dI_u = f1*sigma_u*E_u - (gamma_u+phi_u+delta_u)*I_u
dI_h = f2*sigma_u*E_u+r*sigma_q*E_q+phi_u*I_u+sigma_a*I_a -(gamma_h+nu_h+delta_h)*I_h
dI_a = (1-f1-f2)*sigma_u*E_u + (1-r)*sigma_q*E_q - (gamma_a+sigma_a+delta_a)*I_a
dI_icu = nu_h*I_h - (gamma_icu + delta_icu)*I_icu
dR = gamma_u*I_u+ gamma_h*I_h + gamma_a*I_a + gamma_icu*I_icu
dD = delta_u*I_u + delta_h*I_h + delta_a*I_a + delta_icu*I_icu
#combine results
results=c(dS_u,dS_q,dE_u, dE_q,dI_u,dI_h,dI_a,dI_icu,dR,dD)
list(results)
}
)
}
beta= 0.8648
p=0.8073
q= 0.2
f1=0.4
f2=0.2
psi_q = 1/14
E_M = 0.5
C_M = 0.0546
eta_a = 0.5
eta_h = 0.5
theta_q = 1
theta_j = 0.5
sigma_u = 1/5.1
sigma_q = 1/5.1
sigma_a = 0.2435
alpha_u = 0.1160
phi_u = 1/5
r = 0.7
delta_u = 0.015
delta_h = 0.015
delta_a = 0.0075
delta_icu = 0.0225
gamma_u = 1/10
gamma_h = 1/8
gamma_a = 1/10
gamma_icu = 1/10
nu_h = 0.083
parameter_list<- c(beta=beta,p=p,q=q, psi_q=psi_q,E_M=E_M,C_M=C_M,
eta_h=eta_h,eta_a=eta_a,theta_j=theta_j,
sigma_u=sigma_u,sigma_a=sigma_a,sigma_q=sigma_q,
alpha_u=alpha_u, phi_u=phi_u, r=r,
delta_u=delta_u,delta_h=delta_h,delta_a=delta_a,delta_icu=delta_icu,
gamma_u=gamma_u,gamma_h=gamma_h,gamma_a=gamma_a,gamma_icu=gamma_icu,
nu_h=nu_h)
N=100000000
S_q0=500
E_u0= 500
E_q0=500
I_u0=500
I_a0=500
I_h0=500
I_icu0=0
R0=0
D0=0
S_u0=N-(S_q0+E_u0+E_q0+I_u0+I_a0+I_h0+I_icu0+R0+D0)
initial_populations <- c(S_u=S_u0,S_q=S_q0,E_u=E_u0,E_q=E_q0,
I_u=I_u0,I_a=I_a0,I_h=I_h0,I_icu=I_icu0,
R0=R0,D0=D0)
time=seq(0, 365, by = 1)
output_baseline=as.data.frame(lsoda(initial_populations, time, Model_fun, parameter_list))
View(output_baseline)
source('~/R-course/COVID19/Model from EPHI/EPHI_model/Intervention.r')
1/5
source('~/R-course/COVID19/Model from EPHI/EPHI_model/Intervention.r')
source('~/R-course/COVID19/Model from EPHI/EPHI_model/Intervention.r')
alpha_u  = proportion_nonquaratined_Exposed__isolated_by_contact_tracing * total_outflow_E_u
source('~/R-course/COVID19/Model from EPHI/EPHI_model/Intervention.r')
source('~/R-course/COVID19/Model from EPHI/EPHI_model/Intervention.r')
source('~/R-course/COVID19/Model from EPHI/EPHI_model/Intervention.r')
source('~/R-course/COVID19/Model from EPHI/EPHI_model/Intervention.r')
N=100000000
E_u0= 0
E_q0=0
I_u0=500
I_a0=500
I_h0=0
I_icu0=0
R0=0
D0=0
S0=N-(E_u0+E_q0+I_u0+I_a0+I_h0+I_icu0+R0+D0)
S0
source('~/R-course/COVID19/Model from EPHI/EPHI_model/Intervention.r')
1.000011e+08
source('~/R-course/COVID19/Model from EPHI/EPHI_model/Intervention.r')
