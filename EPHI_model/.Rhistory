#compartment durations
incubation_period=5
infectious_period=7
hospital_stay=10
icu_period=10
# total outflows from compartments
total_outflow_E_u = 1/incubation_period
total_outflow_E_q = 1/incubation_period
total_outflow_I_u = 1/infectious_period
total_outflow_I_a = 1/infectious_period
total_outflow_I_h = 1/hospital_stay
total_outflow_I_icu = 1/icu_period
proportion_of_E_u_progressing_to_I_u=0.4
f=proportion_of_E_u_progressing_to_I_u
#proportions of Covid related death
proportion_mortality_in_I_u= 0.02
proportion_mortality_in_I_a= 0.02
proportion_mortality_in_I_h= 0.02
proportion_mortality_in_I_icu= 0.02
#ICU
proportion_I_h_requiring_ICU=0.1
nu_h = proportion_I_h_requiring_ICU*total_outflow_I_h
#intervention
proportion_population_wearing_faceMask=0.5
proportion_nonquaratined_Exposed__isolated_by_contact_tracing=0.1
proportion_Asymptomatic_infectious_isolated_by_contact_tracing=0.2
proportion_Nonquarantined_infectious_isolated_by_detection=0.7
reduction_in_contact_rate_by_social_distancing = 1-0.25
alpha_u  = proportion_nonquaratined_Exposed__isolated_by_contact_tracing * total_outflow_E_u
phi_u    = proportion_Nonquarantined_infectious_isolated_by_detection * total_outflow_I_u
sigma_a  = proportion_Asymptomatic_infectious_isolated_by_contact_tracing * total_outflow_I_a
C_M      = proportion_population_wearing_faceMask
S_D      = reduction_in_contact_rate_by_social_distancing
#progression rates from Exposed to Infectious
sigma_u = total_outflow_E_u - alpha_u
sigma_q = total_outflow_E_q
##Mortality rates
delta_u =  proportion_mortality_in_I_u*total_outflow_I_u
delta_a = proportion_mortality_in_I_a*total_outflow_I_a
delta_h = proportion_mortality_in_I_h*total_outflow_I_h
delta_icu = proportion_mortality_in_I_icu*total_outflow_I_icu
#Recovery rate
gamma_u = total_outflow_I_u-(delta_u + phi_u)
gamma_a = total_outflow_I_a-(delta_a + sigma_a)
gamma_h = total_outflow_I_h - (delta_h + nu_h)
gamma_icu = total_outflow_I_icu - delta_icu
parameter_list<- c(beta=beta,E_M=E_M,C_M=C_M,
eta_h=eta_h,eta_a=eta_a,eta_icu=eta_icu,
sigma_u=sigma_u,sigma_a=sigma_a,sigma_q=sigma_q,
alpha_u=alpha_u, phi_u=phi_u, f=f,
delta_u=delta_u,delta_h=delta_h,delta_a=delta_a,delta_icu=delta_icu,
gamma_u=gamma_u,gamma_h=gamma_h,gamma_a=gamma_a,gamma_icu=gamma_icu,
nu_h=nu_h)
#compartment population
N=100000000
E_u0= 0
E_q0=0
I_u0=500
I_a0=500
I_h0=0
I_icu0=0
R0=0
D0=0
S0=N-(E_u0+E_q0+I_u0+I_a0+I_h0+I_icu0+R0+D0)
initial_populations <- c(S=S0,E_u=E_u0,E_q=E_q0,
I_u=I_u0,I_a=I_a0,I_h=I_h0,I_icu=I_icu0,
R=R0,D=D0)
time=seq(0, 2000, by = 1)
output_baseline=as.data.frame(lsoda(initial_populations, time, Model_fun, parameter_list))
View(output_baseline)
4000000
1000/4e+06
N=4e+06
N*0.001
N/200
200/N
100/N
source('~/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/Intervention.r')
N_t<- output_baseline$S + output_baseline$E +
output_baseline$I_u + output_baseline$I_h + output_baseline$R + output_baseline$D
plot(N_t)
N_t<- output_baseline$S + output_baseline$E + output_baseline$I_u + output_baseline$I_h + output_baseline$R + output_baseline$D
plot(N_t)
N_t
#Numeric simulation
#Step 1 load packages
library(deSolve)
#define function
Model_fun<- function(time, state, parameters) {
#creat state variables (local variables)
S<-state[1] # Susceptible
E<-state[2] # Exposed
I_u<-state[3] # non-isolated infectious
I_h<-state[4] # Isolated/hospitalised infectious
R<-state[5] # Recovered
D<-state[6]# Dead
with(
as.list(parameters), #variable names within parameters can be used
{
#compute derivative
dS = - (beta* S_D* (1-E_M*C_M)*(I_u+eta_h*I_h)/N)*S
dE = (beta*S_D*(1-E_M*C_M)*(I_u+eta_h*I_h)/N)*S - sigma*E
dI_u = (1-f)*sigma*E - p1*phi_u*I_u + p2*delta_u*I_u + (1-(p1+p2))*gamma_u*I_u
dI_h =  f*sigma*E + p1*phi_u*I_u - (1-q)*gamma_h*I_h + q*delta_h*I_h
dR = (1-(p1+p2))*gamma_u*I_u + (1-q)*gamma_h*I_h
dD = p2*delta_u*I_u + q*delta_h*I_h
#combine results
results=c(dS,dE,dI_u,dI_h,dR,dD)
list(results)
}
)
}
#Parameter values
R0=2.6
#compartment durations
incubation_period=5
infectious_period=7
hospital_stay=10
icu_period=10
detection_delay=5
#force of infection
effective_contact_rate_per_infectious_per_time= R0/infectious_period #
mask_efficacy = 0.3
relative_infectiousness_of_I_h_compared_to_I_u=0.2
beta = effective_contact_rate_per_infectious_per_time
E_M = mask_efficacy
eta_h = relative_infectiousness_of_I_h_compared_to_I_u
# total outflows from compartments
E_outflow = 1/incubation_period
I_u_outflow_recovery_death = 1/infectious_period
I_u_outflow_detection = 1/detection_delay
I_h_outflow = 1/hospital_stay
#proportions of Covid related death
proportion_of_I_u_confirmed_and_isolated=0.4
proportion_mortality_from_I_u= 0.02
proportion_mortality_from_I_h= 0.02
p2=proportion_mortality_from_I_u
q=proportion_mortality_from_I_h
#intervention
proportion_of_E_u_progressing_to_I_h=0.0
proportion_population_wearing_faceMask=0.0
reduction_in_contact_rate_by_social_distancing = 1
proportion_of_I_u_confirmed_and_isolated=0.0
f=proportion_of_E_u_progressing_to_I_h
C_M      = proportion_population_wearing_faceMask
S_D      = reduction_in_contact_rate_by_social_distancing
p1      =proportion_of_I_u_confirmed_and_isolated
phi_u   = p1*I_u_outflow_detection
#progression rates from Exposed to Infectious
sigma = E_outflow
##Mortality rates
delta_u =  I_u_outflow_recovery_death
delta_h = I_h_outflow
#Recovery rate
gamma_u = I_u_outflow_recovery_death
gamma_h = I_h_outflow
#list parameters
parameters<- c(beta=beta, E_M=E_M, C_M=C_M,
p1=p1, p2=p2, q=q, f=f,
eta_h=eta_h,
sigma=sigma, phi_u=phi_u,
delta_u=delta_u, delta_h=delta_h,
gamma_u=gamma_u, gamma_h=gamma_h)
#compartment population
N=4e+06
E0= N*0.001 #4000
I_u0=N*0.00025 #1000
I_h0=N*0.00025 #1000
R0=N*5e-05 #200
D0=N*2.5e-05#100
S0=N-(E0+I_u0+I_h0+R0+D0)
initial_populations <- c(S=S0,E=E0,
I_u=I_u0,I_h=I_h0,
R=R0,D=D0)
time=seq(0, 365, by = 1)
output_baseline=as.data.frame(lsoda(initial_populations, time, Model_fun, parameters))
View(output_baseline)
output_baseline$N_t<- output_baseline$S + output_baseline$E + output_baseline$I_u + output_baseline$I_h + output_baseline$R + output_baseline$D
View(output_baseline)
plot(N_t)
N=4e+06
E0= N*0.001 #4000
I_u0=N*0.00025 #1000
I_h0=N*0.00025 #1000
R0=N*5e-05 #200
D0=N*2.5e-05#100
S0= N-(E0+I_u0+I_h0+R0+D0)
S0
#Numeric simulation
#Step 1 load packages
library(deSolve)
#define function
Model_fun<- function(time, state, parameters) {
#creat state variables (local variables)
S<-state[1] # Susceptible
E<-state[2] # Exposed
I_u<-state[3] # non-isolated infectious
I_h<-state[4] # Isolated/hospitalised infectious
R<-state[5] # Recovered
D<-state[6]# Dead
with(
as.list(parameters), #variable names within parameters can be used
{
#compute derivative
dS = - (beta* S_D* (1-E_M*C_M)*(I_u+eta_h*I_h)/N)*S
dE = (beta*S_D*(1-E_M*C_M)*(I_u+eta_h*I_h)/N)*S - sigma*E
dI_u = (1-f)*sigma*E - p1*phi_u*I_u + p2*delta_u*I_u + (1-(p1+p2))*gamma_u*I_u
dI_h =  f*sigma*E + p1*phi_u*I_u - (1-q)*gamma_h*I_h + q*delta_h*I_h
dR = (1-(p1+p2))*gamma_u*I_u + (1-q)*gamma_h*I_h
dD = p2*delta_u*I_u + q*delta_h*I_h
#combine results
results=c(dS,dE,dI_u,dI_h,dR,dD)
list(results)
}
)
}
#Parameter values
R0=2.6
#compartment durations
incubation_period=5
infectious_period=7
hospital_stay=10
icu_period=10
detection_delay=5
#force of infection
effective_contact_rate_per_infectious_per_time= R0/infectious_period #
mask_efficacy = 0.3
relative_infectiousness_of_I_h_compared_to_I_u=0.2
beta = effective_contact_rate_per_infectious_per_time
E_M = mask_efficacy
eta_h = relative_infectiousness_of_I_h_compared_to_I_u
# total outflows from compartments
E_outflow = 1/incubation_period
I_u_outflow_recovery_death = 1/infectious_period
I_u_outflow_detection = 1/detection_delay
I_h_outflow = 1/hospital_stay
#proportions of Covid related death
proportion_of_I_u_confirmed_and_isolated=0.4
proportion_mortality_from_I_u= 0.02
proportion_mortality_from_I_h= 0.02
p2=proportion_mortality_from_I_u
q=proportion_mortality_from_I_h
#intervention
proportion_of_E_u_progressing_to_I_h=0.0
proportion_population_wearing_faceMask=0.0
reduction_in_contact_rate_by_social_distancing = 1
proportion_of_I_u_confirmed_and_isolated=0.0
f=proportion_of_E_u_progressing_to_I_h
C_M      = proportion_population_wearing_faceMask
S_D      = reduction_in_contact_rate_by_social_distancing
p1      =proportion_of_I_u_confirmed_and_isolated
phi_u   = p1*I_u_outflow_detection
#progression rates from Exposed to Infectious
sigma = E_outflow
##Mortality rates
delta_u =  I_u_outflow_recovery_death
delta_h = I_h_outflow
#Recovery rate
gamma_u = I_u_outflow_recovery_death
gamma_h = I_h_outflow
#list parameters
parameters<- c(beta=beta, E_M=E_M, C_M=C_M,
p1=p1, p2=p2, q=q, f=f,
eta_h=eta_h,
sigma=sigma, phi_u=phi_u,
delta_u=delta_u, delta_h=delta_h,
gamma_u=gamma_u, gamma_h=gamma_h)
#compartment population
N=4e+06
E0= N*0.001 #4000
I_u0=N*0.00025 #1000
I_h0=N*0#0.00025 #1000
R0=N*5e-05 #200
D0=N*2.5e-05#100
S0= N-(E0+I_u0+I_h0+R0+D0)
initial_populations <- c(S=S0,E=E0,
I_u=I_u0,I_h=I_h0,
R=R0,D=D0)
time=seq(0, 365, by = 1)
output_baseline=as.data.frame(lsoda(initial_populations, time, Model_fun, parameters))
View(output_baseline)
output_baseline$N_t<- output_baseline$S + output_baseline$E + output_baseline$I_u + output_baseline$I_h + output_baseline$R + output_baseline$D
View(output_baseline)
E_outflow
plot(output_baseline$time,output_baseline$N_t,type = 'l')
plot(output_baseline$time,output_baseline$N_t,type = 'l')
plot(output_baseline$time,output_baseline$R,
#ylim = c(0,4e+06),
type="n",
xlab='Time in days',
ylab = 'Number of cases', main="Types of cases", panel.first= grid())
lines(output_baseline$time,output_baseline$S,lwd=2.5,col='chocolate4')
lines(output_baseline$time,output_baseline$E,lwd=2.5,col='darkorchid1')
lines(output_baseline$time,output_baseline$I_u,lwd=3,col="blue")
lines(output_baseline$time,output_baseline$I_h,lwd=3,col = 'red')
lines(output_baseline$time,output_baseline$R,lwd=2.5,col = 'green')
lines(output_baseline$time,output_baseline$D,lwd=2.5,col = 'dark')
lines(output_baseline$time,output_baseline$D,lwd=2.5,col = 'black')
legend(0,4e+06,c("Susceptible","Exposed",
"Non-isolated Infectious",
"Isolated Infectious","Recoverd","Dead"),
lty=c(1,1,1,1,1,1),lwd=c(3,3,3,3,3,3),
col=c('chocolate4','darkorchid1',"blue","red","green",'black'))
S_D
1-E_M*C_M
beta
eta_h
dS = - (beta* S_D* (1-E_M*C_M)*(I_u+ eta_h*I_h)/N)*S
- (beta* S_D* (1-E_M*C_M)/N)
N
beta* S_D* (1-E_M*C_M)
2.6/7
Model_fun<- function(time, state, parameters) {
#creat state variables (local variables)
S<-state[1] # Susceptible
E<-state[2] # Exposed
I_u<-state[3] # non-isolated infectious
I_h<-state[4] # Isolated/hospitalised infectious
R<-state[5] # Recovered
D<-state[6]# Dead
with(
as.list(parameters), #variable names within parameters can be used
{
#compute derivative
dS = - (beta* S_D* (1-E_M*C_M)*(I_u+ eta_h*I_h))*S
dE = (beta*S_D*(1-E_M*C_M)*(I_u+eta_h*I_h))*S - sigma*E
dI_u = (1-f)*sigma*E - p1*phi_u*I_u + p2*delta_u*I_u + (1-(p1+p2))*gamma_u*I_u
dI_h =  f*sigma*E + p1*phi_u*I_u - (1-q)*gamma_h*I_h + q*delta_h*I_h
dR = (1-(p1+p2))*gamma_u*I_u + (1-q)*gamma_h*I_h
dD = p2*delta_u*I_u + q*delta_h*I_h
#combine results
results=c(dS,dE,dI_u,dI_h,dR,dD)
list(results)
}
)
}
R0=2.6
#compartment durations
incubation_period=5
infectious_period=7
hospital_stay=10
detection_delay=5
#force of infection
effective_contact_rate_per_infectious_per_time= R0/infectious_period #
mask_efficacy = 0.3
relative_infectiousness_of_I_h_compared_to_I_u=0.2
beta = effective_contact_rate_per_infectious_per_time
E_M = mask_efficacy
eta_h = relative_infectiousness_of_I_h_compared_to_I_u
# total outflows from compartments
E_outflow = 1/incubation_period
I_u_outflow_recovery_death = 1/infectious_period
I_u_outflow_detection = 1/detection_delay
I_h_outflow = 1/hospital_stay
#proportions of Covid related death
proportion_of_I_u_confirmed_and_isolated=0.4
proportion_mortality_from_I_u= 0.02
proportion_mortality_from_I_h= 0.02
p2=proportion_mortality_from_I_u
q=proportion_mortality_from_I_h
#intervention
proportion_of_E_u_progressing_to_I_h=0.0
proportion_population_wearing_faceMask=0.0
reduction_in_contact_rate_by_social_distancing = 1
proportion_of_I_u_confirmed_and_isolated=0.0
f=proportion_of_E_u_progressing_to_I_h
C_M      = proportion_population_wearing_faceMask
S_D      = reduction_in_contact_rate_by_social_distancing
p1      =proportion_of_I_u_confirmed_and_isolated
phi_u   = p1*I_u_outflow_detection
#progression rates from Exposed to Infectious
sigma = E_outflow
##Mortality rates
delta_u =  I_u_outflow_recovery_death
delta_h = I_h_outflow
#Recovery rate
gamma_u = I_u_outflow_recovery_death
gamma_h = I_h_outflow
#list parameters
parameters<- c(beta=beta, E_M=E_M, C_M=C_M,
p1=p1, p2=p2, q=q, f=f,
eta_h=eta_h,
sigma=sigma, phi_u=phi_u,
delta_u=delta_u, delta_h=delta_h,
gamma_u=gamma_u, gamma_h=gamma_h)
#compartment population
N=4e+06
E0= N*0.001 #4000
I_u0=N*0.00025 #1000
I_h0=N*0#0.00025 #1000
R0=N*5e-05 #200
D0=N*2.5e-05#100
S0= N-(E0+I_u0+I_h0+R0+D0)
initial_populations <- c(S=S0,E=E0,
I_u=I_u0,I_h=I_h0,
R=R0,D=D0)
time=seq(0, 365, by = 1)
output_baseline=as.data.frame(lsoda(initial_populations, time, Model_fun, parameters))
View(output_baseline)
#Check total population N=4e+06
output_baseline$N_t<- output_baseline$S + output_baseline$E + output_baseline$I_u + output_baseline$I_h + output_baseline$R + output_baseline$D
View(output_baseline)
plot(output_baseline$time,output_baseline$N_t,type = 'l')
source('~/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/Intervention.r')
source('~/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/Intervention.r')
source('~/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/Intervention.r')
source('~/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/Baseline_model.r')
source('~/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/Baseline_model.r')
source('~/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/Baseline_model.r')
source('~/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/Baseline_model.r')
source('~/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/Baseline_model.r')
legend('topleft',c("Susceptible","Exposed",
"Non-isolated Infectious",
"Isolated Infectious","Recoverd","Dead"),
lty=c(1,1,1,1,1,1),lwd=c(3,3,3,3,3,3),
col=c('chocolate4','darkorchid1',"blue","red","green",'black'))
source('~/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/Baseline_model.r')
source('~/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/Baseline_model.r')
source('~/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/Baseline_model.r')
E_outflow
phi_u
sigma
f*sigma
(1-f)
1-f)*sigma
(1-f)*sigma
p1*phi_u*I_u
p1
phi_u
I_u_outflow_detection
source('~/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/Baseline_model.r')
(1-(p1+p2))
p2
p1
(1-(p1+p2))*gamma_u +p2*delta_u*I_u
(1-(p1+p2))*gamma_u +p2*delta_u
I_u_outflow_recovery_death
source('~/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/Baseline_model.r')
source('~/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/Baseline_model.r')
source('~/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/Baseline_model.r')
source('~/.active-rstudio-document')
source('//ad.monash.edu/home/User065/ymel0001/Documents/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/Simple_SEIR_model.r')
source('//ad.monash.edu/home/User065/ymel0001/Documents/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/Simple_SEIR_model.r')
source('//ad.monash.edu/home/User065/ymel0001/Documents/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/Simple_SEIR_model.r')
source('//ad.monash.edu/home/User065/ymel0001/Documents/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/SEIIRD_model.r')
source('//ad.monash.edu/home/User065/ymel0001/Documents/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/SEIIRD_model.r')
source('//ad.monash.edu/home/User065/ymel0001/Documents/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/SEIIRD_model.r')
plot(output_SEIIRD$time,output_SEIIRD$N_t,type = 'l')
source('//ad.monash.edu/home/User065/ymel0001/Documents/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/SEIIRD_model.r')
source('//ad.monash.edu/home/User065/ymel0001/Documents/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/SEIIRD_model.r')
source('//ad.monash.edu/home/User065/ymel0001/Documents/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/SEIIRD_model.r')
source('//ad.monash.edu/home/User065/ymel0001/Documents/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/SEIIRD_model.r')
source('//ad.monash.edu/home/User065/ymel0001/Documents/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/SEIIRD_model.r')
source('//ad.monash.edu/home/User065/ymel0001/Documents/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/SEIIRD_model.r')
source('//ad.monash.edu/home/User065/ymel0001/Documents/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/SEIIRD_model.r')
source('~/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/Simple_SEIRD_model.r')
source('~/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/SEII_hRD model_for_intervention.r')
source('~/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/Simple_SEIRD_model.r')
source('~/R-course/COVID19/Model from EPHI/ABREN/EPHI_model/Simple_SEIRD_model.r')
data_csv<-read.csv("Data for Addis Ababa.csv")
data_csv<-read.csv("Data for Addis Ababa.csv")
View(data_csv)
data_csv$Date<-as.Date(data_csv$Date,format="%d/%m/%Y")
plot(data_csv$Date,data_csv$New.Cases,type = "l")
plot(data_csv$Date,data_csv$New.Cases,type = "h")
View(data_csv)
data_csv<-read.csv("Data for Addis Ababa.csv")
View(data_csv)
data_csv$Date<-as.Date(data_csv$Date,format="%d/%m/%Y")
View(data_csv)
data_csv<-read.csv("Data for Addis Ababa.csv")
View(data_csv)
dat<- data_csv[which(data_csv$Imported.Cases/data_csv$New.Cases<=0.15),]
View(dat)
data(dat$New.Cases)
library(R0)
data(dat$New.Cases)
check.incid(dat$New.Cases)
mGT<-generation.time("gamma", c(3.7, 0.85))#3-5
time_dependent_R0 <- est.R0.TD(dat$New.Cases,
#import = data_csv$new_imported_case,
mGT,
begin=1, end=length(dat$New.Cases),
q = c(0.025,0.975),
correct = TRUE, nsim = 10000, checked = FALSE)
time_dependent_R0 <- est.R0.TD(dat$New.Cases,
#import = data_csv$new_imported_case,
mGT,
begin=1, end=24,
q = c(0.025,0.975),
correct = TRUE, nsim = 10000, checked = FALSE)
length(dat$New.Cases)
time_dependent_R0$conf.int
plot(time_dependent_R0)
r_o<-time_dependent_R0$R
max(r_o) #5.61, 8.232908
min(r_o)#0, 0
mean(TD$R)#0.7591983,1.210575
mean(r_o)#0.7591983,1.210575
mean(time_dependent_R0$conf.int$lower)#0.2990154, 0.4828956
mean(time_dependent_R0$conf.int$upper)#
r_o<-as.data.frame (r_o)
View(r_o)
p1<-plot(r_o$r_o,type = 'l', col='red',lwd=4,
main = "R0 not-adjusted for imported cases",
ylab = "Reproductive Number",
xlab="Report day")
time_dependent_R0.weekly <- smooth.Rt(time_dependent_R0, 7)
time_dependent_R0.weekly
plot(time_dependent_R0.weekly)
summary(time_dependent_R0.weekly)
time_dependent_R0.weekly
